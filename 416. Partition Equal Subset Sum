416. Partition Equal Subset Sum
Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise. 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100

solution:
class Solution {
public:

bool space(vector<int>& nums,int s1)
{
    int n=nums.size();
    vector <int> curr(s1+1,0);
    vector <int> next(s1+1,0);
    curr[0]=1;
    next[0]=1;
    for(int i=n-1;i>=0;i--)
    {
        for(int t=0;t<=s1/2;t++)
        {
            bool case2=false;
            if(t-nums[i]>=0)
            {
                case2= next[t-nums[i]];
            }
             
            bool case3=next[t];
            curr[t]=case2||case3;

        }
        next=curr;
    }

    return next[s1/2];
}
bool tab(vector<int>& nums,int s1)
{
    int n=nums.size();
    vector<vector <int>> dp(n+1,vector<int>(s1+1,0));

    for(int i=0;i<=n;i++)
    {
        dp[i][0]=1;
    }
    for(int i=n-1;i>=0;i--)
    {
        for(int t=0;t<=s1/2;t++)
        {
            bool case2=false;
            if(t-nums[i]>=0)
            {
                case2= dp[i+1][t-nums[i]];
            }
             
            bool case3=dp[i+1][t];
            dp[i][t]=case2||case3;

        }
    }

    return dp[0][s1/2];
}
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto &a:nums)
        {
            sum+=a;
        }
        if(sum%2==1)
        {
            return false;
        }

        // return rec(nums,sum/2,sum/2,0);
        // int n=nums.size();
        // vector<vector <int>> dp(n,vector<int>((sum/2)+1,-1));
        //  return mem(nums,sum/2,0,dp);

        // return tab(nums,sum);
         return space(nums,sum);
        
    }
};
