question:
1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit
Solved
Medium
Topics
Companies
Hint
Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
Example 2:

Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
Example 3:

Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
0 <= limit <= 10
solution:
class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        int left = 0, right = 0;
        int maxVal = nums[0], minVal = nums[0];
        int maxLength = 0;
        int n=nums.size();
        while (right < n) {
            // max and min value will be updated as right is shifted in the end of loop
            maxVal = max(maxVal, nums[right]);
            minVal = min(minVal, nums[right]);

            if (maxVal - minVal <= limit) {
                // if limit in under then update the maxlength
                maxLength = max(maxLength, right - left + 1);
            } else {
                // when oone elemen is removing we need to update the current max and min in the subarray
                left++;
                maxVal = nums[left];
                minVal = nums[left];
                for (int i = left; i <= right; i++) {
                    maxVal = max(maxVal, nums[i]);
                    minVal = min(minVal, nums[i]);
                }
            }
            right++;
        }
        return maxLength;
            
    }
};


