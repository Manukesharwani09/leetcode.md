question:
Given a binary matrix mat of size n * m, find out the maximum length of a side of square sub-matrix with all 1s.

Example 1:

Input: n = 2, m = 2
mat = {{1, 1}, 
       {1, 1}}
Output: 2
Explanation: The maximum length of a side of the square sub-matrix is 2. The matrix itself is the maximum sized sub-matrix in this case.
Example 2:

Input: n = 2, m = 2
mat = {{0, 0}, 
       {0, 0}}
Output: 0
Explanation: There is no 1 in the matrix.
Your Task:
You do not need to read input or print anything. Your task is to complete the function maxSquare() which takes 2 integers n, m and a 2-d integer array mat as input parameters and returns the maximum length of a side of square sub-matrix with all 1s.

Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Constraints:
1 ≤ n, m ≤ 100
0 ≤ mat[i][j] ≤ 1 



solution:
  public:

int rec( vector<vector<int>> mat,int i, int j,int & maxi)
{
    if(i>=mat.size() || j>=mat[0].size())
    {
        return 0;
    }
    int r=rec(mat,i,j+1,maxi);
    int d=rec(mat,i+1,j,maxi);
    int di=rec(mat,i+1,j+1,maxi);
    
    if(mat[i][j]==1)
    {
        int ans=1+min(r,min(d,di));
        maxi=max(maxi,ans);
        return ans;
        }
    else
    {
        return 0;
    }
}


int mem( vector<vector<int>> mat,int i, int j,int & maxi, vector< vector <int> > &dp)
{
    if(i>=mat.size() || j>=mat[0].size())
    {
        return 0;
    }
    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }
    int r=mem(mat,i,j+1,maxi,dp);
    int d=mem(mat,i+1,j,maxi,dp);
    int di=mem(mat,i+1,j+1,maxi,dp);
    
    if(mat[i][j]==1)
    {
        dp[i][j]=1+min(r,min(d,di));
        maxi=max(maxi,dp[i][j]);
        return dp[i][j];
        }
    else
    {
        dp[i][j]=0;
    }
    
    return dp[i][j];
}


int tab( vector<vector<int>> mat,int n, int m,int &maxi)
{
   
    vector< vector <int> > dp(n+1,vector<int>(m+1,0));
    
    for(int i=n-1;i>=0;i--)
    {
        for(int j=m-1;j>=0;j--)
        {
            int r=dp[i][j+1];
            int d=dp[i+1][j];
            int di=dp[i+1][j+1];
            
            if(mat[i][j]==1)
            {
                dp[i][j]=1+min(r,min(d,di));
                maxi=max(maxi,dp[i][j]);
                
                }
            else
            {
                dp[i][j]=0;
            }
            
        }
    }
    
    return dp[0][0];
}

int sp( vector<vector<int>> mat,int n, int m,int &maxi)
{
    vector <int> curr(m+1,0);
     vector <int> next(m+1,0);
    
    for(int i=n-1;i>=0;i--)
    {
        for(int j=m-1;j>=0;j--)
        {
            int r=curr[j+1];
            int d=next[j];
            int di=next[j+1];
            
            if(mat[i][j]==1)
            {
                curr[j]=1+min(r,min(d,di));
                maxi=max(maxi,curr[j]);
                
                }
            else
            {
                curr[j]=0;
            }
            
      
    }
      next=curr;
    }
    
    return next[0];
}
    int maxSquare(int n, int m, vector<vector<int>> mat){
        // code here
        // recursion
        // int maxi=0;
        // int ans=rec(mat,0,0,maxi);
        // return maxi;
        
        // vector< vector <int> > dp(n,vector<int>(m,-1));
        //         int maxi=0;
        // int ans=mem(mat,0,0,maxi,dp);
        // return maxi;
        
        // int maxi=0;
        // int ans=tab(mat,n,m,maxi);
        // return maxi;
        
        // space optimisation
                
        int maxi=0;
        int ans=sp(mat,n,m,maxi);
        return maxi;
        
    }
};
