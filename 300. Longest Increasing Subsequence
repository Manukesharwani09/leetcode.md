question:
300. Longest Increasing Subsequence
Solved
Medium
Topics
Companies
Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?
solution:
class Solution {
public:

    int rec(vector<int>& nums,int curr,int prev) {
        if(curr==nums.size())
        {
            return 0;
        }
        int include=0;
        // if nums is empty then include the first element whether the element is bigger or not cause
        if(prev==-1 || nums[prev]<nums[curr])
        {
            include=1+rec(nums,curr+1,curr);
        }
        int exclude=0+rec(nums,curr+1,prev);

        return max(include,exclude);
    }

        int mem(vector<int>& nums,int curr,int prev,vector<vector <int>>& dp) {
        if(curr==nums.size())
        {
            return 0;
        }
        if(dp[curr][prev+1]!=-1)
        {
            return dp[curr][prev+1];
        }
        int include=0;
        // if nums is empty then include the first element whether the element is bigger or not cause
        if(prev==-1 || nums[prev]<nums[curr])
        {
            include=1+mem(nums,curr+1,curr,dp);
        }
        int exclude=0+mem(nums,curr+1,prev,dp);
        dp[curr][prev+1]=max(include,exclude);

        return dp[curr][prev+1] ;
    }

        int tab(vector<int>& nums) {
            int n=nums.size();
            vector<vector <int>> dp (n+1,vector<int>(n+1,0));

        dp[n][0]=0;
        for(int curr=n-1;curr>=0;curr--)
        {
            for(int prev=curr-1;prev>=-1;prev--)
            {
                int include=0;
                // if nums is empty then include the first element whether the element is bigger or not cause
                if(prev==-1 || nums[prev]<nums[curr])
                {
                    include=1+dp[curr+1][curr+1];
                }
                int exclude=0+dp[curr+1][prev+1];
                dp[curr][prev+1]=max(include,exclude);
            }
        }
        return dp[0][0] ;
    }


    int space(vector<int>& nums) {
            int n=nums.size();
            vector <int>currv (n+1,0);
            vector <int>next (n+1,0);
        for(int curr=n-1;curr>=0;curr--)
        {
            for(int prev=curr-1;prev>=-1;prev--)
            {
                int include=0;
                // if nums is empty then include the first element whether the element is bigger or not cause
                if(prev==-1 || nums[prev]<nums[curr])
                {
                    include=1+next[curr+1];
                }
                int exclude=0+next[prev+1];
                currv[prev+1]=max(include,exclude);
            }
            next=currv;
        }
        return next[0] ;
    }
    int lengthOfLIS(vector<int>& nums) {

        //rec
        // return rec(nums,0,-1);

        //mem
        // int n=nums.size();
        // vector<vector <int>> dp (n,vector<int>(n+1,-1));
        // // n+1  cause prev starts from -1 to n
        //   return mem(nums,0,-1,dp);

        // return tab(nums);

        return space(nums);
    }
};
