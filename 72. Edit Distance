72. Edit Distance
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.
solution:
class Solution {
public:

int rec(string &a,string &b,int i,int j )
{
    // reached the end of first add extra char
    if(i==a.length())
    {
        return b.length()-j;

    }
        if(j==b.length())
    {
        return a.length()-i;

    }
    int ans=INT_MAX;

    if(a[i]==b[j])
    {
        return rec(a,b,i+1,j+1);
    }
    else
    {
        // replace
        int a1=1+rec(a,b,i+1,j+1);
        // delete
        int a2=1+rec(a,b,i+1,j);
        // imsert
        int a3=1+rec(a,b,i,j+1);
        ans=min(a1,min(a2,a3));

    }
    return ans;
}

int mem(string &a,string &b,int i,int j,vector<vector<int>>&dp )
{

    // reached the end of first add extra char
    if(i==a.length())
    {
        return b.length()-j;

    }
        if(j==b.length())
    {
        return a.length()-i;

    }
        if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }

    int ans=INT_MAX;

    if(a[i]==b[j])
    {
        ans= mem(a,b,i+1,j+1,dp);
    }
    else
    {
        // replace
        int a1=1+mem(a,b,i+1,j+1,dp);
        // delete
        int a2=1+mem(a,b,i+1,j,dp);
        // imsert
        int a3=1+mem(a,b,i,j+1,dp);
        ans=min(a1,min(a2,a3));
    }
    dp[i][j]=ans;
    return dp[i][j];
}


int tab(string &a,string &b )
{
    int n1=a.length();
    int n2=b.length();
    vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));

    for(int j=0;j<n2;j++)
    {
        dp[n1][j]=n2-j;
    }
    for(int i=0;i<n1;i++)
    {
        dp[i][n2]=n1-i;
    }

    for(int i=n1-1;i>=0;i--)
    {
        for(int j=n2-1;j>=0;j--)
        {
            int ans=INT_MAX;

        if(a[i]==b[j])
        {
            ans= dp[i+1][j+1];
        }
        else
        {
            // replace
            int a1=1+dp[i+1][j+1];
            // delete
            int a2=1+dp[i+1][j];
            // imsert
            int a3=1+dp[i][j+1];
            ans=min(a1,min(a2,a3));
        }
        dp[i][j]=ans;

        }
    }

    return dp[0][0];
}

int space(string &a,string &b )
{
    int n1=a.length();
    int n2=b.length();
    vector<int> curr(n2+1,0);
    vector<int> next(n2+1,0);

    // for(int j=0;j<n2;j++)
    // {
    //     dp[n1][j]=n2-j;
    // }
    // for(int i=0;i<n1;i++)
    // {
    //     dp[i][n2]=n1-i;
    // }
    for(int j=0;j<n2;j++)
    {
        next[j]=n2-j;
    }

    for(int i=n1-1;i>=0;i--)
    {
        for(int j=n2-1;j>=0;j--)
        {
            // from base case
            curr[n2]=n1-i;
            int ans=INT_MAX;

        if(a[i]==b[j])
        {
            ans= next[j+1];
        }
        else
        {
            // replace
            int a1=1+next[j+1];
            // delete
            int a2=1+next[j];
            // imsert
            int a3=1+curr[j+1];
            ans=min(a1,min(a2,a3));
        }
        curr[j]=ans;

        }
        next=curr;
    }

    return next[0];
}
    int minDistance(string word1, string word2) {

        // return rec(word1,word2,0,0);
        int n1=word1.length();
        int n2=word2.length();
        // vector<vector<int>>dp(n1,vector<int>(n2,-1));
        // return mem(word1,word2,0,0,dp);

        // return tab(word1,word2);
        if(n1==0)
        {
            return n2;
        }
                if(n2==0)
        {
            return n1;

        }
        return space(word1,word2);
        
    }
};
