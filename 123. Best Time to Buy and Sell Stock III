123. Best Time to Buy and Sell Stock III
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105
solution:
class Solution {
public:

    int rec(vector<int>& prices,int index,bool buy,int count) {


        if( (index==prices.size() || count>=2))
        {
            //buy 0 means you have completed the transaction
            return 0;
        }

        int profit=0;
        if(buy)
        {
            // if buyy =1 
            // you ca either buy or just leave it
            profit=max((-prices[index]+rec(prices,index+1,0,count)), (0+rec(prices,index+1,1,count)));

        }
        else
        {
            // if buyy =0 
            // you can either sell or just leave it
            profit=max((prices[index]+rec(prices,index+1,1,count+1)), (0+rec(prices,index+1,0,count)));

        }
  
        return profit;
        
    }

    int mem(vector<int>& prices,int index,bool buy,vector <vector<vector<int>>>&dp,int limit) {
        if(index==prices.size())
        {
            return 0;
        }
        if(limit==0)
        {
            return 0;
        }
        if(dp[index][buy][limit]!=-1)
        {
            return dp[index][buy][limit];
        }
        int profit=0;
        if(buy)
        {
            // if buyy =1 
            // you ca either buy or just leave it
            profit=max((-prices[index]+mem(prices,index+1,0,dp,limit)), (0+mem(prices,index+1,1,dp,limit)));

        }
        else
        {
            // if buyy =1 
            // you ca either buy or just leave it
            profit=max((prices[index]+mem(prices,index+1,1,dp,limit-1)), (0+mem(prices,index+1,0,dp,limit)));

        }
        dp[index][buy][limit]=profit;
        return dp[index][buy][limit];
        
    }

    
    int tab(vector<int>& prices) {
        int n=prices.size();
        vector <vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));

        for(int index=n-1;index>=0;index--)
        {
            int profit=0;
            for(int buy=0;buy<=1;buy++)
            {
                // limit==0 ans is 0 so limit starts from 1
                for(int limit=1;limit<=2;limit++)
                {
                     if(buy)
                {
                    // if buyy =1 
                    // you ca either buy or just leave it
                    profit=max((-prices[index]+dp[index+1][0][limit]), (0+dp[index+1][1][limit]));

                }
                else
                {
                    // if buyy =1 
                    // you ca either buy or just leave it
                    profit=max((prices[index]+dp[index+1][1][limit-1]), (0+dp[index+1][0][limit]));

                }
                dp[index][buy][limit]=profit;

                }
               
            }
        }        
        return dp[0][1][2];
        
    }

    int space(vector<int>& prices) {
    int n=prices.size();
    vector<vector<int>>next(2,vector<int>(3,0));
    vector<vector<int>>prev(2,vector<int>(3,0));

    for(int index=n-1;index>=0;index--)
    {
        
        for(int buy=0;buy<=1;buy++)
        {
            for(int limit=1;limit<=2;limit++)
            {
                int profit=0;
                if(buy)
            {
                // if buyy =1 
                // you ca either buy or just leave it
                profit=max((-prices[index]+next[0][limit]), (0+next[1][limit]));

            }
            else
            {
                // if buyy =1 
                // you ca either buy or just leave it
                profit=max((prices[index]+next[1][limit-1]), (0+next[0][limit]));
            }
            prev[buy][limit]=profit;
            }
           
        }
            next=prev;         
    }        
    return next[1][2];
    
}
    int maxProfit(vector<int>& prices) {
         
         int n=prices.size();
       
        // return space(prices);

        // int count=0;
        //   return rec(prices,0,1,count);
        //[n][buy][limit]

        //   vector <vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        //   return mem(prices,0,1,dp,2);

        //  return tab(prices);
        return space(prices);

        
        
    }
};
