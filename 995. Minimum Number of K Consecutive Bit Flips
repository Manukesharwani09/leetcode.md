995. Minimum Number of K Consecutive Bit Flips

You are given a binary array nums and an integer k.

A k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [0,1,0], k = 1
Output: 2
Explanation: Flip nums[0], then flip nums[2].
Example 2:

Input: nums = [1,1,0], k = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].
Example 3:

Input: nums = [0,0,0,1,0,1,1,0], k = 3
Output: 3
Explanation: 
Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]
Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]
Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]
 

Constraints:

1 <= nums.length <= 105
1 <= k <= nums.length
solution:
class Solution {
public:

    int minKBitFlips(vector<int>& nums, int k) {

        int n = nums.size();
        // total no of times flipped
        int cnt = 0;
        // store flip count for current index i
        int flip=0;
        // stores if i index is flipped or not
        vector<int> isflip(n,0);

        for(int i=0;i<n;i++)
        {
            // agar us window ke phhle flip hua  hai toh flip count reduce karna hai
            if(i>=k && isflip[i-k]==1)
            {
                flip--;
            }

            // need to flip or nott
            if(flip%2==nums[i])
            {
                // if i+k goes out of the n 
                // not possible to flip
                //return -1
                if(i+k>n)
                {
                    return -1;
                }
                // mark you flipped at index i
                // flip count inc by one
                // total cnt inc by 1
                cnt++;
                isflip[i]=1;
                flip++;
            }
        }


        return cnt;
    }
};

solution 2:
class Solution {
public:

    int minKBitFlips(vector<int>& nums, int k) {


        // dequeeue is used here storing 1 for flip 0 for no flip
        // of k index
        // starting from i-k index
        deque<int> isflip;
        int n = nums.size();
        // total no of times flipped
        int cnt = 0;
        // store flip count for current index i
        int flip=0;

        for(int i=0;i<n;i++)
        {
            // agar us window ke phhle flip hua  hai toh flip count reduce karna hai
            if(i>=k )
            {
                // first element shows the status of i-k index flips
                flip-=isflip.front();
                // once taken pop the front element
                isflip.pop_front();
            }

            // need to flip or nott
            if(flip%2==nums[i])
            {
                // if i+k goes out of the n 
                // not possible to flip
                //return -1
                if(i+k>n)
                {
                    return -1;
                }
                // mark you flipped at index i
                // flip count inc by one
                // total cnt inc by 1
                cnt++;
                isflip.push_back(1);
                flip++;
            }
            else
            {
                isflip.push_back(0);
            }
        }

        return cnt;
    }
};
