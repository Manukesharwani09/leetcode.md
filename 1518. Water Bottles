1518. Water Bottles
There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

 

Example 1:


Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.
Example 2:


Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.
 

Constraints:

1 <= numBottles <= 100
2 <= numExchange <= 100
solution:
class Solution {
public:


    int numWaterBottles(int numBottles, int numExchange) {
    // no of bottles drink intialy will be no of bottles in starting
    int ans=numBottles;
    // we empty all bottles intially
    int empty=numBottles;
    // no of full bottles we have now
    numBottles=0;
        

    while(numExchange<=empty)
    {
        // new bottle we can purchase
        int newbottle=empty/numExchange;
        // store it in full bottle var
        numBottles=newbottle;
        // add no of new bottles in ans
        ans+=newbottle;
        // now the bottles which we were not able to return +bottle which we emptied now
        empty=(empty%numExchange)+newbottle;

    }

    return ans;
    }
};
