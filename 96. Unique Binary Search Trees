96. Unique Binary Search Trees
Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

 

Example 1:


Input: n = 3
Output: 5
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 19
class Solution {
public:

    int rec(int n) {
        if(n<=1)
        {
            return 1;
        }
        int ans=0;

        for(int i=1;i<=n;i++)
        {
            ans+=rec(i-1)*rec(n-i);
        }
        return ans;
        
    }
        int mem(int n,vector<int>&dp) {
        if(n<=1)
        {
            return 1;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        int ans=0;

        for(int i=1;i<=n;i++)
        {
            ans+=mem(i-1,dp)*mem(n-i,dp);
        }
        dp[n]=ans;
        return dp[n];
        
    }

            int tab(int n ){

        vector<int>dp(n+1,0);
        dp[0]=1;
        dp[1]=1;
        // 0 and  already hanfled

        for(int i=2;i<=n;i++)
        {
            // i represent no of nodes
            // j is root node
            for(int j=1;j<=i;j++)
            {
                dp[i]+=dp[j-1]*dp[i-j];
            }
        }        
        return dp[n];
        
    }

     
    int numTrees(int n) {
        if(n<=1)
        {
            return 1;
        }
        // return rec(n);

        // vector<int>dp(n+1,-1);
        // return mem(n,dp);

        return tab(n);


        
    }
};
