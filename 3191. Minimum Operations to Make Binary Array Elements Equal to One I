3191. Minimum Operations to Make Binary Array Elements Equal to One I
leetcode contest
You are given a 
binary array
 nums.

You can do the following operation on the array any number of times (possibly zero):

Choose any 3 consecutive elements from the array and flip all of them.
Flipping an element means changing its value from 0 to 1, and from 1 to 0.

Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.

 

Example 1:

Input: nums = [0,1,1,1,0,0]

Output: 3

Explanation:
We can do the following operations:

Choose the elements at indices 0, 1 and 2. The resulting array is nums = [1,0,0,1,0,0].
Choose the elements at indices 1, 2 and 3. The resulting array is nums = [1,1,1,0,0,0].
Choose the elements at indices 3, 4 and 5. The resulting array is nums = [1,1,1,1,1,1].
Example 2:

Input: nums = [0,1,1,1]

Output: -1

Explanation:
It is impossible to make all elements equal to 1.

 

Constraints:

3 <= nums.length <= 105
0 <= nums[i] <= 1

solution:
class Solution {
public:
    int minOperations(vector<int>& nums) {

        int n=nums.size();
        int op=0;

        for(int i=0;i<n;i++)
        {
            // check if its 0
            if(nums[i]==0)
            {
                int temp=0;
            //flips the three elements if not i is not in range return -1
            if(i>n-3)
            {
                return -1;
            }
            for(int j=i;j<i+3;j++)
            {

                if(nums[j]==0)
                {
                    nums[j]=1;
                }
                else
                {
                    nums[j]=0;
                }

            }
                op++;   
            }

            
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                return -1;
            }
        }
        return op;
        
    }
};
